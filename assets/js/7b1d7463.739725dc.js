"use strict";(self.webpackChunkinterchain_attestation_docs=self.webpackChunkinterchain_attestation_docs||[]).push([[471],{7167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(4848),s=n(8453);const a={sidebar_position:1},r="System Architecture and Flow",o={id:"architecture/system-architecture-and-flow",title:"System Architecture and Flow",description:"Component Overview",source:"@site/docs/architecture/system-architecture-and-flow.md",sourceDirName:"architecture",slug:"/architecture/system-architecture-and-flow",permalink:"/docs/architecture/system-architecture-and-flow",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/system-architecture-and-flow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/docs/architecture/"},next:{title:"Attestation Config Module",permalink:"/docs/architecture/configmodule"}},c={},l=[{value:"Component Overview",id:"component-overview",level:2},{value:"Flow",id:"flow",level:2},{value:"Before packets can flow",id:"before-packets-can-flow",level:3},{value:"Normal operation",id:"normal-operation",level:3}];function h(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"system-architecture-and-flow",children:"System Architecture and Flow"})}),"\n",(0,i.jsx)(t.h2,{id:"component-overview",children:"Component Overview"}),"\n",(0,i.jsx)(t.p,{children:'Interchain Attestation is composed of a few different components that work together to let validators safely attest to the state of a counterparty chain.\nThe main components, in "chronological order" are:'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Attestation Config Module","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Validators register their signing keys"}),"\n",(0,i.jsx)(t.li,{children:"Chains/clients are registered for attestation with configuration details"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Attestation Sidecar","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Validators run a sidecar that reads counterparty chain information, and generates signed attestations"}),"\n",(0,i.jsx)(t.li,{children:"The sidecar also hosts a GRPC server that can be queried for attestations (used by the chain node to fetch attestations during vote extensions)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Vote Extensions","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Uses the ABCI++ interface with vote extensions to fetch attestations from the sidecar"}),"\n",(0,i.jsx)(t.li,{children:"Attestations are aggregated from all the validators, and sent to the light client for verification and client updates"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Attestation Light Client","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The IBC light client that uses the attestation data to enable IBC connections"}),"\n",(0,i.jsx)(t.li,{children:"The light client verifies the attestations and updates the client state and consensus state with packet commitments"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"In addition, there are some development tools used to test the system: interchaintest and some simapps integrated with the above components"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"architecture.png",src:n(1240).A+"",width:"1728",height:"1120"})}),"\n",(0,i.jsx)(t.h2,{id:"flow",children:"Flow"}),"\n",(0,i.jsx)(t.h3,{id:"before-packets-can-flow",children:"Before packets can flow"}),"\n",(0,i.jsx)(t.p,{children:"A few things need to happen before packets can flow between chains:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["The Attestation Light Client, Vote Extensions and Attestation Config Module is integrated with the chain","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["To learn more about how to integrate into your chain, see the ",(0,i.jsx)(t.a,{href:"../integration-guide",children:"Integration Guide"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Clients are created on both chains, and registered with the Attestation Config Module","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u26a0\ufe0fFor v1, pre-Eureka, we also need to create connections and channels."}),"\n",(0,i.jsx)(t.li,{children:"In v2, only IBC Eureka is supported, and connections and channels are finally a thing of the past."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Validators are registered with their attestation signing keys on the Attestation Config Module"}),"\n",(0,i.jsx)(t.li,{children:"Sufficient Validators have signed up to attest to the counterparty chain (if the configuration requires it)"}),"\n",(0,i.jsx)(t.li,{children:"Validators have configured and started up their Attestation Sidecar process"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"normal-operation",children:"Normal operation"}),"\n",(0,i.jsx)(t.p,{children:"At this point, we have clients on both chains, and validators who are expected to attest to the counterparty chain."}),"\n",(0,i.jsx)(t.p,{children:"The flow of the system for the client to get updated is as follows:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"The sidecar process reads all configured counterparty chain states, generates attestations, signs them and stores them in the sidecar database"}),"\n",(0,i.jsx)(t.li,{children:"The ABCI++ Vote Extensions query the sidecar for the latest attestations"}),"\n",(0,i.jsx)(t.li,{children:"The Vote Extensions aggregate the attestations from all the validators, and send them to the light client"}),"\n",(0,i.jsx)(t.li,{children:"The light client verifies the attestations, and updates the client state and consensus state with the packet commitments"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"We now have a light client that can verify packet commitments, and IBC can flow between the chains."}),"\n",(0,i.jsx)(t.p,{children:"TODO: Add a diagram"}),"\n",(0,i.jsx)(t.p,{children:"TODO: Write about relaying"})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1240:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/architecture-f41212fa80c26f870317731391166051.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);