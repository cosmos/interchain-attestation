// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub/pessimist/validation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidationObjective struct {
	ClientId      string       `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RequiredPower uint64       `protobuf:"varint,2,opt,name=required_power,json=requiredPower,proto3" json:"required_power,omitempty"`
	Validators    []*Validator `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	Activated     bool         `protobuf:"varint,4,opt,name=activated,proto3" json:"activated,omitempty"`
}

func (m *ValidationObjective) Reset()         { *m = ValidationObjective{} }
func (m *ValidationObjective) String() string { return proto.CompactTextString(m) }
func (*ValidationObjective) ProtoMessage()    {}
func (*ValidationObjective) Descriptor() ([]byte, []int) {
	return fileDescriptor_71e3bb3ae9fd6c66, []int{0}
}
func (m *ValidationObjective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationObjective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationObjective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationObjective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationObjective.Merge(m, src)
}
func (m *ValidationObjective) XXX_Size() int {
	return m.Size()
}
func (m *ValidationObjective) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationObjective.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationObjective proto.InternalMessageInfo

func (m *ValidationObjective) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ValidationObjective) GetRequiredPower() uint64 {
	if m != nil {
		return m.RequiredPower
	}
	return 0
}

func (m *ValidationObjective) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidationObjective) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

type Validator struct {
	ValidatorAddr string     `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	PubKey        *types.Any `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_71e3bb3ae9fd6c66, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *Validator) GetPubKey() *types.Any {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ValidatorPower struct {
	Validator *Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Power     uint64     `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *ValidatorPower) Reset()         { *m = ValidatorPower{} }
func (m *ValidatorPower) String() string { return proto.CompactTextString(m) }
func (*ValidatorPower) ProtoMessage()    {}
func (*ValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_71e3bb3ae9fd6c66, []int{2}
}
func (m *ValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPower.Merge(m, src)
}
func (m *ValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPower proto.InternalMessageInfo

func (m *ValidatorPower) GetValidator() *Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *ValidatorPower) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidationObjective)(nil), "hub.pessimist.ValidationObjective")
	proto.RegisterType((*Validator)(nil), "hub.pessimist.Validator")
	proto.RegisterType((*ValidatorPower)(nil), "hub.pessimist.ValidatorPower")
}

func init() { proto.RegisterFile("hub/pessimist/validation.proto", fileDescriptor_71e3bb3ae9fd6c66) }

var fileDescriptor_71e3bb3ae9fd6c66 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x41, 0x6e, 0xda, 0x40,
	0x14, 0x65, 0x0a, 0xa5, 0x78, 0x10, 0x2c, 0xa6, 0x54, 0x32, 0xb4, 0xb5, 0x5c, 0xa4, 0x4a, 0xde,
	0x30, 0x96, 0xa8, 0x54, 0x75, 0x0b, 0x9b, 0xb6, 0xea, 0xa2, 0xc8, 0x95, 0x58, 0x74, 0x51, 0xcb,
	0xf6, 0x4c, 0x61, 0x5a, 0xf0, 0x38, 0x33, 0x63, 0x12, 0xdf, 0x22, 0x27, 0xc8, 0x1d, 0x22, 0x71,
	0x88, 0x28, 0x2b, 0x94, 0x55, 0x96, 0x11, 0x5c, 0x24, 0xc2, 0x03, 0xc6, 0xd9, 0x64, 0x35, 0xfa,
	0xef, 0xbd, 0xf9, 0xff, 0xfd, 0xa7, 0x0f, 0xad, 0x79, 0x1a, 0xba, 0x09, 0x95, 0x92, 0x2d, 0x99,
	0x54, 0xee, 0x2a, 0x58, 0x30, 0x12, 0x28, 0xc6, 0x63, 0x9c, 0x08, 0xae, 0x38, 0x6a, 0xcd, 0xd3,
	0x10, 0x17, 0x7c, 0xaf, 0x1b, 0x71, 0xb9, 0xe4, 0xd2, 0xcf, 0x49, 0x57, 0x17, 0x5a, 0xd9, 0xeb,
	0xce, 0x38, 0x9f, 0x2d, 0xa8, 0x9b, 0x57, 0x61, 0xfa, 0xd7, 0x0d, 0xe2, 0x4c, 0x53, 0xfd, 0x6b,
	0x00, 0x5f, 0x4f, 0x8b, 0xce, 0x3f, 0xc3, 0x7f, 0x34, 0x52, 0x6c, 0x45, 0xd1, 0x5b, 0x68, 0x44,
	0x0b, 0x46, 0x63, 0xe5, 0x33, 0x62, 0x02, 0x1b, 0x38, 0x86, 0xd7, 0xd0, 0xc0, 0x77, 0x82, 0x3e,
	0xc2, 0xb6, 0xa0, 0x67, 0x29, 0x13, 0x94, 0xf8, 0x09, 0x3f, 0xa7, 0xc2, 0x7c, 0x61, 0x03, 0xa7,
	0xe6, 0xb5, 0x8e, 0xe8, 0x64, 0x0f, 0xa2, 0x2f, 0x10, 0x1e, 0x4c, 0x73, 0x21, 0xcd, 0xaa, 0x5d,
	0x75, 0x9a, 0x43, 0x13, 0x3f, 0x71, 0x8d, 0xa7, 0x47, 0x81, 0x57, 0xd2, 0xa2, 0x77, 0xd0, 0x08,
	0xf6, 0x3e, 0x02, 0x45, 0x89, 0x59, 0xb3, 0x81, 0xd3, 0xf0, 0x4e, 0x40, 0xff, 0x0a, 0x40, 0xa3,
	0xf8, 0x87, 0xbe, 0xc1, 0x76, 0xf1, 0xd3, 0x0f, 0x08, 0x11, 0xda, 0xee, 0xf8, 0xc3, 0xdd, 0x7a,
	0xf0, 0xfe, 0x10, 0x43, 0xa1, 0x1e, 0x11, 0x22, 0xa8, 0x94, 0xbf, 0x94, 0x60, 0xf1, 0xcc, 0x6b,
	0xad, 0xca, 0x38, 0xfa, 0x0a, 0x5f, 0x25, 0x69, 0xe8, 0xff, 0xa7, 0x59, 0xbe, 0x4f, 0x73, 0xd8,
	0xc1, 0x3a, 0x38, 0x7c, 0x0c, 0x0e, 0x8f, 0xe2, 0x6c, 0x6c, 0xde, 0xae, 0x07, 0x9d, 0x43, 0xe3,
	0x48, 0x64, 0x89, 0xe2, 0x78, 0x92, 0x86, 0x3f, 0x68, 0xe6, 0xd5, 0x93, 0xfc, 0xed, 0xff, 0x81,
	0xed, 0x62, 0xa2, 0x8e, 0xe2, 0x33, 0x34, 0x8a, 0x59, 0xb9, 0xbf, 0xe7, 0x92, 0x38, 0x49, 0x51,
	0x07, 0xbe, 0x2c, 0x07, 0xac, 0x8b, 0xb1, 0x7b, 0xb3, 0xb5, 0xc0, 0x66, 0x6b, 0x81, 0x87, 0xad,
	0x05, 0x2e, 0x77, 0x56, 0x65, 0xb3, 0xb3, 0x2a, 0xf7, 0x3b, 0xab, 0xf2, 0xfb, 0xcd, 0xfe, 0x66,
	0x2e, 0x4a, 0x57, 0xa3, 0xb2, 0x84, 0xca, 0xb0, 0x9e, 0x2f, 0xf0, 0xe9, 0x31, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x9c, 0x9d, 0x08, 0x53, 0x02, 0x00, 0x00,
}

func (m *ValidationObjective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationObjective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationObjective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RequiredPower != 0 {
		i = encodeVarintValidation(dAtA, i, uint64(m.RequiredPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintValidation(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintValidation(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintValidation(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidationObjective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.RequiredPower != 0 {
		n += 1 + sovValidation(uint64(m.RequiredPower))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovValidation(uint64(l))
		}
	}
	if m.Activated {
		n += 2
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	return n
}

func (m *ValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovValidation(uint64(m.Power))
	}
	return n
}

func sovValidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidation(x uint64) (n int) {
	return sovValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidationObjective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationObjective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationObjective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPower", wireType)
			}
			m.RequiredPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &Validator{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidation = fmt.Errorf("proto: unexpected end of group")
)
