// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub/pessimist/validation_objective.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Rename the client IDs to something more descriptive
type ValidationObjective struct {
	ClientIdToValidate string       `protobuf:"bytes,1,opt,name=client_id_to_validate,json=clientIdToValidate,proto3" json:"client_id_to_validate,omitempty"`
	RequiredPower      uint64       `protobuf:"varint,2,opt,name=required_power,json=requiredPower,proto3" json:"required_power,omitempty"`
	Validators         []*Validator `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	Activated          bool         `protobuf:"varint,4,opt,name=activated,proto3" json:"activated,omitempty"`
	ClientIdToNotify   string       `protobuf:"bytes,5,opt,name=client_id_to_notify,json=clientIdToNotify,proto3" json:"client_id_to_notify,omitempty"`
}

func (m *ValidationObjective) Reset()         { *m = ValidationObjective{} }
func (m *ValidationObjective) String() string { return proto.CompactTextString(m) }
func (*ValidationObjective) ProtoMessage()    {}
func (*ValidationObjective) Descriptor() ([]byte, []int) {
	return fileDescriptor_9490be741c46f041, []int{0}
}
func (m *ValidationObjective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationObjective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationObjective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationObjective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationObjective.Merge(m, src)
}
func (m *ValidationObjective) XXX_Size() int {
	return m.Size()
}
func (m *ValidationObjective) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationObjective.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationObjective proto.InternalMessageInfo

func (m *ValidationObjective) GetClientIdToValidate() string {
	if m != nil {
		return m.ClientIdToValidate
	}
	return ""
}

func (m *ValidationObjective) GetRequiredPower() uint64 {
	if m != nil {
		return m.RequiredPower
	}
	return 0
}

func (m *ValidationObjective) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidationObjective) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ValidationObjective) GetClientIdToNotify() string {
	if m != nil {
		return m.ClientIdToNotify
	}
	return ""
}

type Validator struct {
	ValidatorAddr string     `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	ConsAddr      string     `protobuf:"bytes,2,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	PubKey        *types.Any `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_9490be741c46f041, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *Validator) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *Validator) GetPubKey() *types.Any {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ValidatorPower struct {
	Validator Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
	Power     uint64    `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *ValidatorPower) Reset()         { *m = ValidatorPower{} }
func (m *ValidatorPower) String() string { return proto.CompactTextString(m) }
func (*ValidatorPower) ProtoMessage()    {}
func (*ValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_9490be741c46f041, []int{2}
}
func (m *ValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPower.Merge(m, src)
}
func (m *ValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPower proto.InternalMessageInfo

func (m *ValidatorPower) GetValidator() Validator {
	if m != nil {
		return m.Validator
	}
	return Validator{}
}

func (m *ValidatorPower) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidationObjective)(nil), "hub.pessimist.ValidationObjective")
	proto.RegisterType((*Validator)(nil), "hub.pessimist.Validator")
	proto.RegisterType((*ValidatorPower)(nil), "hub.pessimist.ValidatorPower")
}

func init() {
	proto.RegisterFile("hub/pessimist/validation_objective.proto", fileDescriptor_9490be741c46f041)
}

var fileDescriptor_9490be741c46f041 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x69, 0x69, 0xb6, 0x4a, 0x84, 0xb6, 0xa9, 0x64, 0x2a, 0x30, 0x26, 0x12, 0x92,
	0x2f, 0xb1, 0x45, 0xb9, 0x70, 0x40, 0x48, 0x0d, 0x07, 0x40, 0x48, 0x50, 0x19, 0xd4, 0x03, 0x17,
	0xcb, 0xf6, 0x6e, 0xdd, 0x85, 0x74, 0xc7, 0xec, 0xae, 0x03, 0xfe, 0x0b, 0x3e, 0xa6, 0x1f, 0x51,
	0x71, 0xaa, 0x38, 0x71, 0xaa, 0x50, 0xf2, 0x0f, 0x9c, 0x91, 0xbd, 0xb6, 0x93, 0x08, 0xa9, 0x27,
	0x7b, 0xe6, 0xbd, 0x79, 0xf3, 0x66, 0x66, 0xb1, 0x7b, 0x9e, 0xc7, 0x7e, 0xc6, 0x94, 0xe2, 0x17,
	0x5c, 0x69, 0x7f, 0x1e, 0xcd, 0x38, 0x8d, 0x34, 0x07, 0x11, 0x42, 0xfc, 0x99, 0x25, 0x9a, 0xcf,
	0x99, 0x97, 0x49, 0xd0, 0x40, 0x06, 0xe7, 0x79, 0xec, 0xb5, 0xcc, 0xc3, 0x51, 0x0a, 0x29, 0x54,
	0x88, 0x5f, 0xfe, 0x19, 0xd2, 0xe1, 0xbd, 0x04, 0xd4, 0x05, 0xa8, 0xd0, 0x00, 0x26, 0x68, 0xa0,
	0x14, 0x20, 0x9d, 0x31, 0xbf, 0x8a, 0xe2, 0xfc, 0xcc, 0x8f, 0x44, 0x61, 0xa0, 0xf1, 0x5f, 0x84,
	0xf7, 0x4f, 0xdb, 0xce, 0xef, 0x9b, 0xc6, 0xe4, 0x09, 0x3e, 0x48, 0x66, 0x9c, 0x09, 0x1d, 0x72,
	0x1a, 0x6a, 0x08, 0x6b, 0x77, 0xcc, 0x42, 0x0e, 0x72, 0xfb, 0x01, 0x31, 0xe0, 0x1b, 0xfa, 0x11,
	0xea, 0x6a, 0x46, 0x1e, 0xe3, 0xa1, 0x64, 0x5f, 0x73, 0x2e, 0x19, 0x0d, 0x33, 0xf8, 0xc6, 0xa4,
	0xb5, 0xe5, 0x20, 0xb7, 0x17, 0x0c, 0x9a, 0xec, 0x49, 0x99, 0x24, 0xcf, 0x30, 0xae, 0xc5, 0x40,
	0x2a, 0xab, 0xeb, 0x74, 0xdd, 0xbd, 0x23, 0xcb, 0xdb, 0x98, 0xd0, 0x3b, 0x6d, 0x08, 0xc1, 0x1a,
	0x97, 0xdc, 0xc7, 0xfd, 0xa8, 0x74, 0x17, 0x69, 0x46, 0xad, 0x9e, 0x83, 0xdc, 0xdd, 0x60, 0x95,
	0x20, 0x13, 0xbc, 0xbf, 0xe1, 0x58, 0x80, 0xe6, 0x67, 0x85, 0xb5, 0x5d, 0xf9, 0xbd, 0xbb, 0xf2,
	0xfb, 0xae, 0xca, 0x8f, 0x6f, 0x10, 0xee, 0xb7, 0x6d, 0xc8, 0x6b, 0x3c, 0x6c, 0x1b, 0x85, 0x11,
	0xa5, 0xd2, 0xcc, 0x39, 0x7d, 0xf4, 0xeb, 0x72, 0xf2, 0xa0, 0xde, 0x65, 0xcb, 0x3e, 0xa6, 0x54,
	0x32, 0xa5, 0x3e, 0x68, 0xc9, 0x45, 0x1a, 0x0c, 0xe6, 0xeb, 0x79, 0xf2, 0x02, 0xf7, 0x13, 0x10,
	0xca, 0x88, 0x6c, 0xfd, 0x27, 0xf2, 0x12, 0x84, 0x62, 0x42, 0xe5, 0x6a, 0x53, 0x64, 0xb7, 0xac,
	0xa9, 0xea, 0x5f, 0xe1, 0x3b, 0x59, 0x1e, 0x87, 0x5f, 0x58, 0x61, 0x75, 0x1d, 0xe4, 0xee, 0x1d,
	0x8d, 0x3c, 0x73, 0x3d, 0xaf, 0xb9, 0x9e, 0x77, 0x2c, 0x8a, 0xa9, 0xf5, 0xf3, 0x72, 0x32, 0xaa,
	0x35, 0x13, 0x59, 0x64, 0x1a, 0xbc, 0x93, 0x3c, 0x7e, 0xcb, 0x8a, 0x60, 0x27, 0xab, 0xbe, 0x63,
	0x8a, 0x87, 0xad, 0x63, 0xb3, 0xf9, 0xe7, 0xb8, 0xdf, 0x7a, 0xad, 0xe6, 0xbb, 0x65, 0xf1, 0xd3,
	0xde, 0xd5, 0xcd, 0xc3, 0x4e, 0xb0, 0x2a, 0x20, 0x23, 0xbc, 0xbd, 0x7e, 0x55, 0x13, 0x4c, 0xfd,
	0xab, 0x85, 0x8d, 0xae, 0x17, 0x36, 0xfa, 0xb3, 0xb0, 0xd1, 0x8f, 0xa5, 0xdd, 0xb9, 0x5e, 0xda,
	0x9d, 0xdf, 0x4b, 0xbb, 0xf3, 0xe9, 0xa0, 0x7c, 0xde, 0xdf, 0xd7, 0x1e, 0xb8, 0x2e, 0x32, 0xa6,
	0xe2, 0x9d, 0x6a, 0x8c, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x56, 0xf8, 0x95, 0xfe,
	0x02, 0x00, 0x00,
}

func (m *ValidationObjective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationObjective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationObjective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIdToNotify) > 0 {
		i -= len(m.ClientIdToNotify)
		copy(dAtA[i:], m.ClientIdToNotify)
		i = encodeVarintValidationObjective(dAtA, i, uint64(len(m.ClientIdToNotify)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidationObjective(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RequiredPower != 0 {
		i = encodeVarintValidationObjective(dAtA, i, uint64(m.RequiredPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientIdToValidate) > 0 {
		i -= len(m.ClientIdToValidate)
		copy(dAtA[i:], m.ClientIdToValidate)
		i = encodeVarintValidationObjective(dAtA, i, uint64(len(m.ClientIdToValidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidationObjective(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintValidationObjective(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintValidationObjective(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintValidationObjective(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidationObjective(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintValidationObjective(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidationObjective(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidationObjective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientIdToValidate)
	if l > 0 {
		n += 1 + l + sovValidationObjective(uint64(l))
	}
	if m.RequiredPower != 0 {
		n += 1 + sovValidationObjective(uint64(m.RequiredPower))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovValidationObjective(uint64(l))
		}
	}
	if m.Activated {
		n += 2
	}
	l = len(m.ClientIdToNotify)
	if l > 0 {
		n += 1 + l + sovValidationObjective(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovValidationObjective(uint64(l))
	}
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovValidationObjective(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovValidationObjective(uint64(l))
	}
	return n
}

func (m *ValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovValidationObjective(uint64(l))
	if m.Power != 0 {
		n += 1 + sovValidationObjective(uint64(m.Power))
	}
	return n
}

func sovValidationObjective(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidationObjective(x uint64) (n int) {
	return sovValidationObjective(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidationObjective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidationObjective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationObjective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationObjective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdToValidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIdToValidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPower", wireType)
			}
			m.RequiredPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdToNotify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIdToNotify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidationObjective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidationObjective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidationObjective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidationObjective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidationObjective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidationObjective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidationObjective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidationObjective(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidationObjective
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidationObjective
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidationObjective
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidationObjective
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidationObjective
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidationObjective        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidationObjective          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidationObjective = fmt.Errorf("proto: unexpected end of group")
)
