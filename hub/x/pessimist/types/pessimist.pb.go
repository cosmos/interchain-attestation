// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub/pessimist/pessimist.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientState struct {
	DependentClientId string `protobuf:"bytes,1,opt,name=dependent_client_id,json=dependentClientId,proto3" json:"dependent_client_id,omitempty"`
	LatestHeight      int64  `protobuf:"fixed64,2,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

// This is the client message
type CommitteeProposal struct {
	Commitments []Commitment `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments"`
}

func (m *CommitteeProposal) Reset()         { *m = CommitteeProposal{} }
func (m *CommitteeProposal) String() string { return proto.CompactTextString(m) }
func (*CommitteeProposal) ProtoMessage()    {}
func (*CommitteeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{1}
}
func (m *CommitteeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitteeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitteeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitteeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeProposal.Merge(m, src)
}
func (m *CommitteeProposal) XXX_Size() int {
	return m.Size()
}
func (m *CommitteeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeProposal proto.InternalMessageInfo

func (m *CommitteeProposal) GetCommitments() []Commitment {
	if m != nil {
		return m.Commitments
	}
	return nil
}

// Commitment is pretty much just a vote extension + signature and validator info
type Commitment struct {
	ValidatorAddress       []byte                 `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	CanonicalVoteExtension CanonicalVoteExtension `protobuf:"bytes,2,opt,name=canonical_vote_extension,json=canonicalVoteExtension,proto3" json:"canonical_vote_extension"`
	ExtensionSignature     []byte                 `protobuf:"bytes,3,opt,name=extension_signature,json=extensionSignature,proto3" json:"extension_signature,omitempty"`
	Timestamp              time.Time              `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{2}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Commitment) GetCanonicalVoteExtension() CanonicalVoteExtension {
	if m != nil {
		return m.CanonicalVoteExtension
	}
	return CanonicalVoteExtension{}
}

func (m *Commitment) GetExtensionSignature() []byte {
	if m != nil {
		return m.ExtensionSignature
	}
	return nil
}

func (m *Commitment) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// Copied from comet just to make this work quickly
type CanonicalVoteExtension struct {
	Extension []byte `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	Height    int64  `protobuf:"fixed64,2,opt,name=height,proto3" json:"height,omitempty"`
	Round     int64  `protobuf:"fixed64,3,opt,name=round,proto3" json:"round,omitempty"`
	ChainId   string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CanonicalVoteExtension) Reset()         { *m = CanonicalVoteExtension{} }
func (m *CanonicalVoteExtension) String() string { return proto.CompactTextString(m) }
func (*CanonicalVoteExtension) ProtoMessage()    {}
func (*CanonicalVoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{3}
}
func (m *CanonicalVoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanonicalVoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanonicalVoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanonicalVoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanonicalVoteExtension.Merge(m, src)
}
func (m *CanonicalVoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *CanonicalVoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_CanonicalVoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_CanonicalVoteExtension proto.InternalMessageInfo

func (m *CanonicalVoteExtension) GetExtension() []byte {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *CanonicalVoteExtension) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CanonicalVoteExtension) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CanonicalVoteExtension) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type VoteExtension struct {
	ValidationVotes []ValidationVote `protobuf:"bytes,1,rep,name=validation_votes,json=validationVotes,proto3" json:"validation_votes"`
}

func (m *VoteExtension) Reset()         { *m = VoteExtension{} }
func (m *VoteExtension) String() string { return proto.CompactTextString(m) }
func (*VoteExtension) ProtoMessage()    {}
func (*VoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{4}
}
func (m *VoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtension.Merge(m, src)
}
func (m *VoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtension proto.InternalMessageInfo

func (m *VoteExtension) GetValidationVotes() []ValidationVote {
	if m != nil {
		return m.ValidationVotes
	}
	return nil
}

type ValidationVote struct {
	ClientIdToValidate string     `protobuf:"bytes,1,opt,name=client_id_to_validate,json=clientIdToValidate,proto3" json:"client_id_to_validate,omitempty"`
	ClientIdToUpdate   string     `protobuf:"bytes,2,opt,name=client_id_to_update,json=clientIdToUpdate,proto3" json:"client_id_to_update,omitempty"`
	Height             int64      `protobuf:"fixed64,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp          time.Time  `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	MerkleRoot         MerkleRoot `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root"`
	NextValidatorHash  []byte     `protobuf:"bytes,6,opt,name=next_validator_hash,json=nextValidatorHash,proto3" json:"next_validator_hash,omitempty"`
}

func (m *ValidationVote) Reset()         { *m = ValidationVote{} }
func (m *ValidationVote) String() string { return proto.CompactTextString(m) }
func (*ValidationVote) ProtoMessage()    {}
func (*ValidationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{5}
}
func (m *ValidationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationVote.Merge(m, src)
}
func (m *ValidationVote) XXX_Size() int {
	return m.Size()
}
func (m *ValidationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationVote.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationVote proto.InternalMessageInfo

func (m *ValidationVote) GetClientIdToValidate() string {
	if m != nil {
		return m.ClientIdToValidate
	}
	return ""
}

func (m *ValidationVote) GetClientIdToUpdate() string {
	if m != nil {
		return m.ClientIdToUpdate
	}
	return ""
}

func (m *ValidationVote) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ValidationVote) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *ValidationVote) GetMerkleRoot() MerkleRoot {
	if m != nil {
		return m.MerkleRoot
	}
	return MerkleRoot{}
}

func (m *ValidationVote) GetNextValidatorHash() []byte {
	if m != nil {
		return m.NextValidatorHash
	}
	return nil
}

// This is just used to pass from prepareProposal to pre-blocker handler
type CommitteeProposalSpecialTx struct {
	CommitteeProposal CommitteeProposal `protobuf:"bytes,1,opt,name=committee_proposal,json=committeeProposal,proto3" json:"committee_proposal"`
	ClientIdsToSendTo []string          `protobuf:"bytes,2,rep,name=client_ids_to_send_to,json=clientIdsToSendTo,proto3" json:"client_ids_to_send_to,omitempty"`
}

func (m *CommitteeProposalSpecialTx) Reset()         { *m = CommitteeProposalSpecialTx{} }
func (m *CommitteeProposalSpecialTx) String() string { return proto.CompactTextString(m) }
func (*CommitteeProposalSpecialTx) ProtoMessage()    {}
func (*CommitteeProposalSpecialTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{6}
}
func (m *CommitteeProposalSpecialTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitteeProposalSpecialTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitteeProposalSpecialTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitteeProposalSpecialTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitteeProposalSpecialTx.Merge(m, src)
}
func (m *CommitteeProposalSpecialTx) XXX_Size() int {
	return m.Size()
}
func (m *CommitteeProposalSpecialTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitteeProposalSpecialTx.DiscardUnknown(m)
}

var xxx_messageInfo_CommitteeProposalSpecialTx proto.InternalMessageInfo

func (m *CommitteeProposalSpecialTx) GetCommitteeProposal() CommitteeProposal {
	if m != nil {
		return m.CommitteeProposal
	}
	return CommitteeProposal{}
}

func (m *CommitteeProposalSpecialTx) GetClientIdsToSendTo() []string {
	if m != nil {
		return m.ClientIdsToSendTo
	}
	return nil
}

// copy from ibc
type MerkleRoot struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *MerkleRoot) Reset()         { *m = MerkleRoot{} }
func (m *MerkleRoot) String() string { return proto.CompactTextString(m) }
func (*MerkleRoot) ProtoMessage()    {}
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_cce33860bba2a04d, []int{7}
}
func (m *MerkleRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleRoot.Merge(m, src)
}
func (m *MerkleRoot) XXX_Size() int {
	return m.Size()
}
func (m *MerkleRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleRoot.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleRoot proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientState)(nil), "hub.pessimist.ClientState")
	proto.RegisterType((*CommitteeProposal)(nil), "hub.pessimist.CommitteeProposal")
	proto.RegisterType((*Commitment)(nil), "hub.pessimist.Commitment")
	proto.RegisterType((*CanonicalVoteExtension)(nil), "hub.pessimist.CanonicalVoteExtension")
	proto.RegisterType((*VoteExtension)(nil), "hub.pessimist.VoteExtension")
	proto.RegisterType((*ValidationVote)(nil), "hub.pessimist.ValidationVote")
	proto.RegisterType((*CommitteeProposalSpecialTx)(nil), "hub.pessimist.CommitteeProposalSpecialTx")
	proto.RegisterType((*MerkleRoot)(nil), "hub.pessimist.MerkleRoot")
}

func init() { proto.RegisterFile("hub/pessimist/pessimist.proto", fileDescriptor_cce33860bba2a04d) }

var fileDescriptor_cce33860bba2a04d = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0x13, 0x4b,
	0x10, 0xf6, 0xd9, 0x4e, 0x5e, 0x3c, 0x4e, 0xde, 0xb3, 0x37, 0x3f, 0x74, 0xb1, 0x5e, 0x6c, 0xeb,
	0x10, 0xc8, 0x12, 0xe2, 0x2c, 0x82, 0x44, 0x41, 0x45, 0x1c, 0x21, 0x25, 0x05, 0x08, 0xd9, 0x8e,
	0x0b, 0x9a, 0xd3, 0xf9, 0x6e, 0xf0, 0x9d, 0xb8, 0xdb, 0x3d, 0xdd, 0xae, 0x23, 0x53, 0xd1, 0x52,
	0xa6, 0xa1, 0xa7, 0xe7, 0x9f, 0xa0, 0x4c, 0x99, 0x92, 0x0a, 0x50, 0xf2, 0x8f, 0xa0, 0xdd, 0xfb,
	0x65, 0x27, 0x29, 0xe9, 0x6e, 0xe7, 0x9b, 0x6f, 0x6f, 0xe6, 0xfb, 0x66, 0x16, 0x0e, 0xbc, 0xf9,
	0xb4, 0x1f, 0x21, 0xe7, 0x7e, 0xe8, 0x73, 0x51, 0x7c, 0x99, 0x51, 0xcc, 0x04, 0x23, 0x5b, 0xde,
	0x7c, 0x6a, 0xe6, 0xc1, 0xd6, 0xce, 0x8c, 0xcd, 0x98, 0x42, 0xfa, 0xf2, 0x2b, 0x49, 0x6a, 0x75,
	0x66, 0x8c, 0xcd, 0x02, 0xec, 0xab, 0xd3, 0x74, 0xfe, 0xbe, 0x2f, 0xfc, 0x10, 0xb9, 0xb0, 0xc3,
	0x28, 0x4d, 0xd8, 0x77, 0x18, 0x0f, 0x19, 0xb7, 0x12, 0x66, 0x72, 0x48, 0x20, 0xc3, 0x83, 0xfa,
	0x71, 0xe0, 0x23, 0x15, 0x23, 0x61, 0x0b, 0x24, 0x26, 0x6c, 0xbb, 0x18, 0x21, 0x75, 0x91, 0x0a,
	0xcb, 0x51, 0x80, 0xe5, 0xbb, 0xba, 0xd6, 0xd5, 0x7a, 0xb5, 0x61, 0x33, 0x87, 0x12, 0xca, 0xa9,
	0x4b, 0x1e, 0xc0, 0x56, 0x60, 0x0b, 0xe4, 0xc2, 0xf2, 0xd0, 0x9f, 0x79, 0x42, 0x2f, 0x77, 0xb5,
	0x5e, 0x63, 0xb8, 0x99, 0x04, 0x4f, 0x54, 0xec, 0x45, 0xf5, 0xf3, 0xd7, 0x4e, 0xc9, 0x98, 0x40,
	0xf3, 0x98, 0x85, 0xa1, 0x2f, 0x04, 0xe2, 0xdb, 0x98, 0x45, 0x8c, 0xdb, 0x01, 0x39, 0x82, 0xba,
	0xa3, 0x82, 0x21, 0x52, 0xc1, 0xf5, 0x4a, 0xb7, 0xd2, 0xab, 0x1f, 0xee, 0x9b, 0x2b, 0x5d, 0x9b,
	0xc7, 0x79, 0xc6, 0xa0, 0x7a, 0xf9, 0xb3, 0x53, 0x1a, 0x2e, 0x73, 0x8c, 0x2f, 0x65, 0x80, 0x22,
	0x83, 0x3c, 0x86, 0xe6, 0xb9, 0x1d, 0xf8, 0xae, 0x2d, 0x58, 0x6c, 0xd9, 0xae, 0x1b, 0x23, 0xe7,
	0xaa, 0xfe, 0xcd, 0x61, 0x23, 0x07, 0x8e, 0x92, 0x38, 0x41, 0xd0, 0x1d, 0x9b, 0x32, 0xea, 0x3b,
	0x76, 0x60, 0x9d, 0x33, 0x81, 0x16, 0x2e, 0x04, 0x52, 0xee, 0x33, 0xaa, 0x3a, 0xa9, 0x1f, 0x3e,
	0xbc, 0x5d, 0x4b, 0x96, 0x3e, 0x61, 0x02, 0x5f, 0x65, 0xc9, 0x69, 0x5d, 0x7b, 0xce, 0xbd, 0x28,
	0xe9, 0xc3, 0x76, 0x7e, 0xaf, 0xc5, 0xfd, 0x19, 0xb5, 0xc5, 0x3c, 0x46, 0xbd, 0xa2, 0xaa, 0x22,
	0x39, 0x34, 0xca, 0x10, 0x32, 0x80, 0x5a, 0xee, 0xa1, 0x5e, 0x55, 0x85, 0xb4, 0xcc, 0xc4, 0x65,
	0x33, 0x73, 0xd9, 0x1c, 0x67, 0x19, 0x83, 0x0d, 0xf9, 0xf7, 0x8b, 0x5f, 0x1d, 0x6d, 0x58, 0xd0,
	0x8c, 0x4f, 0xb0, 0x77, 0x7f, 0xb1, 0xe4, 0x7f, 0xa8, 0x15, 0x6d, 0x26, 0xd2, 0x14, 0x01, 0xb2,
	0x07, 0xeb, 0x2b, 0x5e, 0xa6, 0x27, 0xb2, 0x03, 0x6b, 0x31, 0x9b, 0x53, 0x57, 0x95, 0xdd, 0x18,
	0x26, 0x07, 0xb2, 0x0f, 0x1b, 0x8e, 0x67, 0xfb, 0x54, 0x4e, 0x49, 0x55, 0x4d, 0xc9, 0x3f, 0xea,
	0x7c, 0xea, 0x1a, 0x16, 0x6c, 0xad, 0xfe, 0xf7, 0x0d, 0x64, 0x0e, 0x48, 0x1d, 0xa4, 0xdc, 0xd2,
	0x19, 0xe9, 0xf8, 0xc1, 0x2d, 0x95, 0x27, 0x79, 0x9a, 0xbc, 0x21, 0x55, 0xf7, 0xbf, 0xf3, 0x95,
	0x28, 0x37, 0xbe, 0x97, 0xe1, 0xdf, 0xd5, 0x4c, 0xf2, 0x14, 0x76, 0xf3, 0xa9, 0xb5, 0x04, 0xb3,
	0x52, 0x0a, 0xa6, 0x13, 0x4c, 0x9c, 0x74, 0x70, 0xc7, 0x2c, 0x25, 0x22, 0x79, 0x02, 0xdb, 0x2b,
	0x94, 0x79, 0xa4, 0x08, 0x65, 0x45, 0x68, 0x14, 0x84, 0x33, 0x15, 0x5f, 0x92, 0xa7, 0xb2, 0x22,
	0xcf, 0x5f, 0xb0, 0x8c, 0xbc, 0x84, 0x7a, 0x88, 0xf1, 0x87, 0x00, 0xad, 0x98, 0x31, 0xa1, 0xaf,
	0xa9, 0x5b, 0x6e, 0x6f, 0xc3, 0x6b, 0x95, 0x31, 0x64, 0x2c, 0xdb, 0x06, 0x08, 0xf3, 0x88, 0xdc,
	0x5f, 0x8a, 0x0b, 0x61, 0x15, 0x2b, 0xe0, 0xd9, 0xdc, 0xd3, 0xd7, 0x95, 0xc9, 0x4d, 0x09, 0x4d,
	0x32, 0xe4, 0xc4, 0xe6, 0x9e, 0xf1, 0x4d, 0x83, 0xd6, 0x9d, 0xad, 0x1c, 0x45, 0xe8, 0xf8, 0x76,
	0x30, 0x5e, 0x90, 0x33, 0x20, 0x4e, 0x86, 0xca, 0xd7, 0x43, 0xc1, 0x4a, 0xcb, 0xfa, 0x61, 0xf7,
	0xde, 0x2d, 0x5d, 0xba, 0x26, 0x2d, 0xaf, 0xe9, 0xdc, 0xd9, 0xfa, 0xe7, 0x4b, 0x2e, 0x71, 0xa9,
	0x39, 0x47, 0x2a, 0xb5, 0xd7, 0xcb, 0xdd, 0x4a, 0xaf, 0x96, 0xf3, 0x52, 0xe9, 0xf9, 0x98, 0x8d,
	0x90, 0xba, 0x63, 0x66, 0x3c, 0x02, 0x28, 0xba, 0x27, 0x04, 0xaa, 0xaa, 0xb9, 0x64, 0x82, 0xd5,
	0x77, 0xf2, 0xd4, 0x0c, 0xfa, 0x97, 0xd7, 0x6d, 0xed, 0xea, 0xba, 0xad, 0xfd, 0xbe, 0x6e, 0x6b,
	0x17, 0x37, 0xed, 0xd2, 0xd5, 0x4d, 0xbb, 0xf4, 0xe3, 0xa6, 0x5d, 0x7a, 0xb7, 0x2b, 0x9f, 0xdb,
	0xc5, 0xd2, 0x83, 0x2b, 0x3e, 0x46, 0xc8, 0xa7, 0xeb, 0xca, 0xa1, 0x67, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x8a, 0x2e, 0xdf, 0xa5, 0x8e, 0x05, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestHeight != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LatestHeight))
		i--
		dAtA[i] = 0x11
	}
	if len(m.DependentClientId) > 0 {
		i -= len(m.DependentClientId)
		copy(dAtA[i:], m.DependentClientId)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.DependentClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitteeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitteeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitteeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPessimist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPessimist(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.ExtensionSignature) > 0 {
		i -= len(m.ExtensionSignature)
		copy(dAtA[i:], m.ExtensionSignature)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.ExtensionSignature)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CanonicalVoteExtension.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPessimist(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanonicalVoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanonicalVoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanonicalVoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Round != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i--
		dAtA[i] = 0x19
	}
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Height))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationVotes) > 0 {
		for iNdEx := len(m.ValidationVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPessimist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextValidatorHash) > 0 {
		i -= len(m.NextValidatorHash)
		copy(dAtA[i:], m.NextValidatorHash)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.NextValidatorHash)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.MerkleRoot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPessimist(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintPessimist(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Height))
		i--
		dAtA[i] = 0x19
	}
	if len(m.ClientIdToUpdate) > 0 {
		i -= len(m.ClientIdToUpdate)
		copy(dAtA[i:], m.ClientIdToUpdate)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.ClientIdToUpdate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientIdToValidate) > 0 {
		i -= len(m.ClientIdToValidate)
		copy(dAtA[i:], m.ClientIdToValidate)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.ClientIdToValidate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitteeProposalSpecialTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitteeProposalSpecialTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitteeProposalSpecialTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIdsToSendTo) > 0 {
		for iNdEx := len(m.ClientIdsToSendTo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIdsToSendTo[iNdEx])
			copy(dAtA[i:], m.ClientIdsToSendTo[iNdEx])
			i = encodeVarintPessimist(dAtA, i, uint64(len(m.ClientIdsToSendTo[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.CommitteeProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPessimist(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MerkleRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPessimist(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPessimist(dAtA []byte, offset int, v uint64) int {
	offset -= sovPessimist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DependentClientId)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	if m.LatestHeight != 0 {
		n += 9
	}
	return n
}

func (m *CommitteeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for _, e := range m.Commitments {
			l = e.Size()
			n += 1 + l + sovPessimist(uint64(l))
		}
	}
	return n
}

func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	l = m.CanonicalVoteExtension.Size()
	n += 1 + l + sovPessimist(uint64(l))
	l = len(m.ExtensionSignature)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovPessimist(uint64(l))
	return n
}

func (m *CanonicalVoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	if m.Height != 0 {
		n += 9
	}
	if m.Round != 0 {
		n += 9
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	return n
}

func (m *VoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidationVotes) > 0 {
		for _, e := range m.ValidationVotes {
			l = e.Size()
			n += 1 + l + sovPessimist(uint64(l))
		}
	}
	return n
}

func (m *ValidationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientIdToValidate)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	l = len(m.ClientIdToUpdate)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	if m.Height != 0 {
		n += 9
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovPessimist(uint64(l))
	l = m.MerkleRoot.Size()
	n += 1 + l + sovPessimist(uint64(l))
	l = len(m.NextValidatorHash)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	return n
}

func (m *CommitteeProposalSpecialTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommitteeProposal.Size()
	n += 1 + l + sovPessimist(uint64(l))
	if len(m.ClientIdsToSendTo) > 0 {
		for _, s := range m.ClientIdsToSendTo {
			l = len(s)
			n += 1 + l + sovPessimist(uint64(l))
		}
	}
	return n
}

func (m *MerkleRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPessimist(uint64(l))
	}
	return n
}

func sovPessimist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPessimist(x uint64) (n int) {
	return sovPessimist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependentClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependentClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			m.LatestHeight = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestHeight = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitteeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitteeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitteeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, Commitment{})
			if err := m.Commitments[len(m.Commitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalVoteExtension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CanonicalVoteExtension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionSignature = append(m.ExtensionSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtensionSignature == nil {
				m.ExtensionSignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanonicalVoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanonicalVoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanonicalVoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = append(m.Extension[:0], dAtA[iNdEx:postIndex]...)
			if m.Extension == nil {
				m.Extension = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationVotes = append(m.ValidationVotes, ValidationVote{})
			if err := m.ValidationVotes[len(m.ValidationVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdToValidate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIdToValidate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdToUpdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIdToUpdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorHash = append(m.NextValidatorHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextValidatorHash == nil {
				m.NextValidatorHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitteeProposalSpecialTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitteeProposalSpecialTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitteeProposalSpecialTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommitteeProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIdsToSendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIdsToSendTo = append(m.ClientIdsToSendTo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPessimist
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPessimist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPessimist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPessimist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPessimist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPessimist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPessimist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPessimist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPessimist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPessimist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPessimist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPessimist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPessimist = fmt.Errorf("proto: unexpected end of group")
)
