// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/proof.proto

package server

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/gjermundgaraba/pessimistic-validation/proversidecar/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProofRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ProofRequest) Reset()         { *m = ProofRequest{} }
func (m *ProofRequest) String() string { return proto.CompactTextString(m) }
func (*ProofRequest) ProtoMessage()    {}
func (*ProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d2db7d6b85cce2c, []int{0}
}
func (m *ProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofRequest.Merge(m, src)
}
func (m *ProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProofRequest proto.InternalMessageInfo

func (m *ProofRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type ProofResponse struct {
	Proof *types.SignedPacketCommitmentsClaim `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ProofResponse) Reset()         { *m = ProofResponse{} }
func (m *ProofResponse) String() string { return proto.CompactTextString(m) }
func (*ProofResponse) ProtoMessage()    {}
func (*ProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d2db7d6b85cce2c, []int{1}
}
func (m *ProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofResponse.Merge(m, src)
}
func (m *ProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProofResponse proto.InternalMessageInfo

func (m *ProofResponse) GetProof() *types.SignedPacketCommitmentsClaim {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*ProofRequest)(nil), "server.ProofRequest")
	proto.RegisterType((*ProofResponse)(nil), "server.ProofResponse")
}

func init() { proto.RegisterFile("server/proof.proto", fileDescriptor_2d2db7d6b85cce2c) }

var fileDescriptor_2d2db7d6b85cce2c = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x93, 0xa1, 0xa5, 0x18, 0x58, 0x22, 0x90, 0xa0, 0x12, 0x16, 0xca, 0x04, 0x03, 0x89,
	0xd4, 0x4e, 0xac, 0x2d, 0x08, 0xb1, 0x55, 0x61, 0x63, 0xa9, 0x9c, 0xf8, 0x91, 0x3e, 0xa8, 0xed,
	0x60, 0xbf, 0x44, 0xe2, 0x5f, 0xf0, 0xb3, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x8f, 0xa0, 0xc6, 0x20,
	0xa1, 0x6e, 0xf6, 0xdd, 0xa7, 0x77, 0xa7, 0x63, 0x91, 0x03, 0xdb, 0x80, 0x4d, 0x2b, 0x6b, 0xcc,
	0x73, 0x52, 0x59, 0x43, 0x26, 0x1a, 0x7a, 0x6d, 0xfc, 0xe7, 0xd1, 0x7b, 0x05, 0xce, 0x7b, 0xf1,
	0x15, 0x3b, 0x5c, 0x6c, 0xd1, 0x0c, 0xde, 0x6a, 0x70, 0x14, 0x9d, 0xb1, 0x51, 0xb1, 0x12, 0xa8,
	0x97, 0x28, 0x4f, 0xc3, 0x8b, 0xf0, 0x72, 0x3f, 0xdb, 0xeb, 0xff, 0x0f, 0x32, 0xbe, 0x65, 0x47,
	0xbf, 0xa8, 0xab, 0x8c, 0x76, 0x10, 0x4d, 0xd9, 0xa0, 0x8f, 0xe9, 0xc1, 0x83, 0xc9, 0x79, 0xf2,
	0x88, 0xa5, 0x06, 0xb9, 0x10, 0xc5, 0x2b, 0xd0, 0xdc, 0x28, 0x85, 0xa4, 0x40, 0x93, 0x9b, 0xaf,
	0x05, 0xaa, 0xcc, 0xb3, 0x93, 0x19, 0x1b, 0xf4, 0x57, 0xa2, 0x1b, 0x36, 0xba, 0x07, 0xf2, 0xef,
	0xe3, 0xc4, 0x57, 0x4b, 0xfe, 0x77, 0x19, 0x9f, 0xec, 0xa8, 0x3e, 0x36, 0x0e, 0x66, 0xcb, 0xcf,
	0x96, 0x87, 0x9b, 0x96, 0x87, 0xdf, 0x2d, 0x0f, 0x3f, 0x3a, 0x1e, 0x6c, 0x3a, 0x1e, 0x7c, 0x75,
	0x3c, 0x78, 0xba, 0x2b, 0x91, 0x56, 0x75, 0x9e, 0x14, 0x46, 0xa5, 0xe5, 0x0b, 0x58, 0x55, 0x6b,
	0x59, 0x0a, 0x2b, 0x72, 0x91, 0x56, 0xe0, 0x1c, 0x2a, 0x74, 0x84, 0xc5, 0x75, 0x23, 0xd6, 0x28,
	0x05, 0xa1, 0xd1, 0xdb, 0xa1, 0x1a, 0xb0, 0x0e, 0x25, 0x14, 0xc2, 0xa6, 0x3e, 0x30, 0x1f, 0xf6,
	0xe3, 0x4c, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x72, 0x36, 0xe6, 0x4e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProofClient is the client API for Proof service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProofClient interface {
	GetProof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error)
}

type proofClient struct {
	cc grpc1.ClientConn
}

func NewProofClient(cc grpc1.ClientConn) ProofClient {
	return &proofClient{cc}
}

func (c *proofClient) GetProof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error) {
	out := new(ProofResponse)
	err := c.cc.Invoke(ctx, "/server.Proof/GetProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProofServer is the server API for Proof service.
type ProofServer interface {
	GetProof(context.Context, *ProofRequest) (*ProofResponse, error)
}

// UnimplementedProofServer can be embedded to have forward compatible implementations.
type UnimplementedProofServer struct {
}

func (*UnimplementedProofServer) GetProof(ctx context.Context, req *ProofRequest) (*ProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}

func RegisterProofServer(s grpc1.Server, srv ProofServer) {
	s.RegisterService(&_Proof_serviceDesc, srv)
}

func _Proof_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProofServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Proof/GetProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProofServer).GetProof(ctx, req.(*ProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proof_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Proof",
	HandlerType: (*ProofServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProof",
			Handler:    _Proof_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proof.proto",
}

func (m *ProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintProof(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProof(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func (m *ProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovProof(uint64(l))
	}
	return n
}

func sovProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProof(x uint64) (n int) {
	return sovProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.SignedPacketCommitmentsClaim{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProof = fmt.Errorf("proto: unexpected end of group")
)
