syntax = "proto3";
package configmodule.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "configmodule/v1/params.proto";
import "configmodule/v1/attestator.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/gjermundgaraba/interchain-attestation/configmodule/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/configmodule/v1/params";
  }

  rpc Attestators(QueryAttestatorsRequest) returns (QueryAttestatorsResponse) {
    option (google.api.http).get = "/configmodule/v1/attestators";
  }

  rpc Attestator(QueryAttestatorRequest) returns (QueryAttestatorResponse) {
    option (google.api.http).get =
        "/configmodule/v1/attestators/{attestator_id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message QueryAttestatorRequest { bytes attestator_id = 1; }

message QueryAttestatorResponse {
  Attestator attestator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message QueryAttestatorsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAttestatorsResponse {
  repeated Attestator attestators = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}