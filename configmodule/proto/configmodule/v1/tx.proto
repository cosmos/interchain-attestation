syntax = "proto3";
package configmodule.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "configmodule/v1/params.proto";
import "configmodule/v1/attestator.proto";

option go_package = "github.com/gjermundgaraba/interchain-attestation/configmodule/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a governance operation for updating the
  // configmodule module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc RegisterAttestator(MsgRegisterAttestator)
      returns (MsgRegisterAttestatorResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the configmodule parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgRegisterAttestator {
  option (cosmos.msg.v1.signer) = "validator_address";

  string validator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];

  bytes attestator_id = 2;

  google.protobuf.Any attestation_public_key = 3
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
}

message MsgRegisterAttestatorResponse {}