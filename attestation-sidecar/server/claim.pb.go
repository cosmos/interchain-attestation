// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/claim.proto

package server

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/gjermundgaraba/pessimistic-validation/attestationsidecar/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ClaimRequest) Reset()         { *m = ClaimRequest{} }
func (m *ClaimRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimRequest) ProtoMessage()    {}
func (*ClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec4495588e26ad60, []int{0}
}
func (m *ClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRequest.Merge(m, src)
}
func (m *ClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRequest proto.InternalMessageInfo

func (m *ClaimRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type ClaimResponse struct {
	Claim *types.SignedPacketCommitmentsClaim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (m *ClaimResponse) Reset()         { *m = ClaimResponse{} }
func (m *ClaimResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimResponse) ProtoMessage()    {}
func (*ClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec4495588e26ad60, []int{1}
}
func (m *ClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimResponse.Merge(m, src)
}
func (m *ClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimResponse proto.InternalMessageInfo

func (m *ClaimResponse) GetClaim() *types.SignedPacketCommitmentsClaim {
	if m != nil {
		return m.Claim
	}
	return nil
}

func init() {
	proto.RegisterType((*ClaimRequest)(nil), "server.ClaimRequest")
	proto.RegisterType((*ClaimResponse)(nil), "server.ClaimResponse")
}

func init() { proto.RegisterFile("server/claim.proto", fileDescriptor_ec4495588e26ad60) }

var fileDescriptor_ec4495588e26ad60 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x93, 0xa1, 0xa5, 0x18, 0x58, 0x22, 0x90, 0xa0, 0x12, 0x16, 0xca, 0x04, 0x03, 0x89,
	0xd4, 0x4e, 0xac, 0x2d, 0x12, 0x82, 0x09, 0x95, 0x8d, 0x05, 0x39, 0xf6, 0x53, 0xfa, 0xa0, 0xb6,
	0x83, 0xfd, 0x52, 0x89, 0x7f, 0xc1, 0xcf, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x3f, 0x82, 0xb0, 0x41,
	0x42, 0xdd, 0xde, 0xdd, 0x7d, 0xd6, 0x9d, 0xcc, 0x32, 0x0f, 0x6e, 0x0d, 0xae, 0x94, 0x2b, 0x81,
	0xba, 0x68, 0x9c, 0x25, 0x9b, 0x0d, 0xa3, 0x37, 0xfe, 0xcb, 0xe8, 0xad, 0x01, 0x1f, 0xb3, 0xfc,
	0x82, 0xed, 0xcf, 0x7f, 0xd0, 0x05, 0xbc, 0xb6, 0xe0, 0x29, 0x3b, 0x61, 0x23, 0xb9, 0x14, 0x68,
	0x9e, 0x50, 0x1d, 0xa7, 0x67, 0xe9, 0xf9, 0xee, 0x62, 0x27, 0xe8, 0x5b, 0x95, 0x5f, 0xb3, 0x83,
	0x5f, 0xd4, 0x37, 0xd6, 0x78, 0xc8, 0xa6, 0x6c, 0x10, 0x6a, 0x02, 0xb8, 0x37, 0x39, 0x2d, 0x1e,
	0xb0, 0x36, 0xa0, 0xee, 0x85, 0x7c, 0x01, 0x9a, 0x5b, 0xad, 0x91, 0x34, 0x18, 0xf2, 0xf1, 0x55,
	0x64, 0x27, 0x33, 0x36, 0x08, 0x3a, 0xbb, 0x62, 0xa3, 0x1b, 0xa0, 0x78, 0x1f, 0x16, 0x71, 0x5a,
	0xf1, 0x7f, 0xcb, 0xf8, 0x68, 0xcb, 0x8d, 0xb5, 0x79, 0x32, 0x53, 0x1f, 0x1d, 0x4f, 0x37, 0x1d,
	0x4f, 0xbf, 0x3a, 0x9e, 0xbe, 0xf7, 0x3c, 0xd9, 0xf4, 0x3c, 0xf9, 0xec, 0x79, 0xf2, 0x78, 0x57,
	0x23, 0x2d, 0xdb, 0xaa, 0x90, 0x56, 0x97, 0xf5, 0x33, 0x38, 0xdd, 0x1a, 0x55, 0x0b, 0x27, 0x2a,
	0x51, 0x36, 0xe0, 0x3d, 0x6a, 0xf4, 0x84, 0xf2, 0x72, 0x2d, 0x56, 0xa8, 0x04, 0xa1, 0x35, 0xa5,
	0x20, 0x02, 0x4f, 0xe1, 0xf6, 0xa8, 0x40, 0x0a, 0x57, 0xc6, 0xd6, 0x6a, 0x18, 0x7e, 0x68, 0xfa,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xfd, 0x3e, 0xbb, 0x53, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClaimClient is the client API for Claim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClaimClient interface {
	GetClaim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
}

type claimClient struct {
	cc grpc1.ClientConn
}

func NewClaimClient(cc grpc1.ClientConn) ClaimClient {
	return &claimClient{cc}
}

func (c *claimClient) GetClaim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, "/server.Claim/GetClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClaimServer is the server API for Claim service.
type ClaimServer interface {
	GetClaim(context.Context, *ClaimRequest) (*ClaimResponse, error)
}

// UnimplementedClaimServer can be embedded to have forward compatible implementations.
type UnimplementedClaimServer struct {
}

func (*UnimplementedClaimServer) GetClaim(ctx context.Context, req *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaim not implemented")
}

func RegisterClaimServer(s grpc1.Server, srv ClaimServer) {
	s.RegisterService(&_Claim_serviceDesc, srv)
}

func _Claim_GetClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClaimServer).GetClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Claim/GetClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClaimServer).GetClaim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Claim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Claim",
	HandlerType: (*ClaimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClaim",
			Handler:    _Claim_GetClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/claim.proto",
}

func (m *ClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClaim(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClaim(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClaim(uint64(l))
	}
	return n
}

func (m *ClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovClaim(uint64(l))
	}
	return n
}

func sovClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaim(x uint64) (n int) {
	return sovClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.SignedPacketCommitmentsClaim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaim = fmt.Errorf("proto: unexpected end of group")
)
