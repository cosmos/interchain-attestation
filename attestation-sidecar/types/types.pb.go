// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: FIGURE OUT HOW TO GET THESE IMPORTED INSTEAD, SOMETHING WEIRD ABOUT INCORRECT GO TYPE OR SOMETHING
type SignedPacketCommitmentsClaim struct {
	AttestatorId           []byte                 `protobuf:"bytes,1,opt,name=attestator_id,json=attestatorId,proto3" json:"attestator_id,omitempty"`
	PacketCommitmentsClaim PacketCommitmentsClaim `protobuf:"bytes,2,opt,name=packet_commitments_claim,json=packetCommitmentsClaim,proto3" json:"packet_commitments_claim"`
	Signature              []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedPacketCommitmentsClaim) Reset()         { *m = SignedPacketCommitmentsClaim{} }
func (m *SignedPacketCommitmentsClaim) String() string { return proto.CompactTextString(m) }
func (*SignedPacketCommitmentsClaim) ProtoMessage()    {}
func (*SignedPacketCommitmentsClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b92cdb257a8883, []int{0}
}
func (m *SignedPacketCommitmentsClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPacketCommitmentsClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPacketCommitmentsClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPacketCommitmentsClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPacketCommitmentsClaim.Merge(m, src)
}
func (m *SignedPacketCommitmentsClaim) XXX_Size() int {
	return m.Size()
}
func (m *SignedPacketCommitmentsClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPacketCommitmentsClaim.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPacketCommitmentsClaim proto.InternalMessageInfo

func (m *SignedPacketCommitmentsClaim) GetAttestatorId() []byte {
	if m != nil {
		return m.AttestatorId
	}
	return nil
}

func (m *SignedPacketCommitmentsClaim) GetPacketCommitmentsClaim() PacketCommitmentsClaim {
	if m != nil {
		return m.PacketCommitmentsClaim
	}
	return PacketCommitmentsClaim{}
}

func (m *SignedPacketCommitmentsClaim) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PacketCommitmentsClaim struct {
	Height            types.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height"`
	Timestamp         time.Time    `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	PacketCommitments [][]byte     `protobuf:"bytes,3,rep,name=packet_commitments,json=packetCommitments,proto3" json:"packet_commitments,omitempty"`
}

func (m *PacketCommitmentsClaim) Reset()         { *m = PacketCommitmentsClaim{} }
func (m *PacketCommitmentsClaim) String() string { return proto.CompactTextString(m) }
func (*PacketCommitmentsClaim) ProtoMessage()    {}
func (*PacketCommitmentsClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_16b92cdb257a8883, []int{1}
}
func (m *PacketCommitmentsClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketCommitmentsClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketCommitmentsClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketCommitmentsClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketCommitmentsClaim.Merge(m, src)
}
func (m *PacketCommitmentsClaim) XXX_Size() int {
	return m.Size()
}
func (m *PacketCommitmentsClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketCommitmentsClaim.DiscardUnknown(m)
}

var xxx_messageInfo_PacketCommitmentsClaim proto.InternalMessageInfo

func (m *PacketCommitmentsClaim) GetHeight() types.Height {
	if m != nil {
		return m.Height
	}
	return types.Height{}
}

func (m *PacketCommitmentsClaim) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *PacketCommitmentsClaim) GetPacketCommitments() [][]byte {
	if m != nil {
		return m.PacketCommitments
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedPacketCommitmentsClaim)(nil), "SignedPacketCommitmentsClaim")
	proto.RegisterType((*PacketCommitmentsClaim)(nil), "PacketCommitmentsClaim")
}

func init() { proto.RegisterFile("server/types.proto", fileDescriptor_16b92cdb257a8883) }

var fileDescriptor_16b92cdb257a8883 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x63, 0x0e, 0x55, 0xd4, 0x3d, 0x06, 0x22, 0x54, 0xa2, 0x53, 0x95, 0x3b, 0x95, 0xe5,
	0x96, 0xda, 0x6a, 0x59, 0x98, 0xd3, 0x85, 0x6e, 0x28, 0x20, 0x21, 0xb1, 0x9c, 0x1c, 0xc7, 0xf8,
	0x1e, 0xc4, 0x71, 0x64, 0xbf, 0x44, 0xe2, 0x5b, 0xf4, 0xf3, 0xb0, 0x23, 0x75, 0xbc, 0x91, 0x09,
	0xd0, 0xdd, 0x17, 0x41, 0xc9, 0x25, 0x64, 0xb8, 0xeb, 0xf6, 0xfc, 0xf4, 0xff, 0xbf, 0xf7, 0xf7,
	0xcf, 0xa6, 0xa1, 0x57, 0xae, 0x51, 0x8e, 0xe3, 0xf7, 0x4a, 0x79, 0x56, 0x39, 0x8b, 0x76, 0x36,
	0x87, 0x4c, 0x72, 0x69, 0x9d, 0xe2, 0xb2, 0x00, 0x55, 0x22, 0x6f, 0xae, 0xfb, 0x6a, 0x10, 0x68,
	0x6b, 0x75, 0xa1, 0x78, 0x77, 0xca, 0xea, 0x2f, 0x1c, 0xc1, 0x28, 0x8f, 0xc2, 0x54, 0xbd, 0xe0,
	0xa5, 0xb6, 0xda, 0x76, 0x25, 0x6f, 0xab, 0x7d, 0xf7, 0xf2, 0x07, 0xa1, 0x17, 0x1f, 0x40, 0x97,
	0x2a, 0x7f, 0x2f, 0xe4, 0x37, 0x85, 0xb7, 0xd6, 0x18, 0x40, 0xa3, 0x4a, 0xf4, 0xb7, 0x85, 0x00,
	0x13, 0xbe, 0xa6, 0xcf, 0x05, 0x62, 0x3b, 0x09, 0xad, 0x5b, 0x41, 0x1e, 0x91, 0x05, 0x59, 0x4e,
	0xd3, 0xe9, 0xd8, 0xbc, 0xcb, 0xc3, 0x4f, 0x34, 0xaa, 0x3a, 0xfb, 0x4a, 0x8e, 0xfe, 0x95, 0x6c,
	0x07, 0x44, 0x4f, 0x16, 0x64, 0x79, 0x76, 0xf3, 0x8a, 0x1d, 0x9f, 0x9f, 0x3c, 0x7d, 0xf8, 0x3d,
	0x0f, 0xd2, 0xf3, 0xea, 0xf8, 0xf6, 0x0b, 0x7a, 0xea, 0x41, 0x97, 0x02, 0x6b, 0xa7, 0xa2, 0x49,
	0xb7, 0x79, 0x6c, 0x5c, 0xfe, 0x24, 0xf4, 0xfc, 0x91, 0xd8, 0x6f, 0xe9, 0xc9, 0x5a, 0x81, 0x5e,
	0x63, 0x97, 0xf7, 0xec, 0x66, 0xc6, 0x20, 0x93, 0xac, 0x05, 0xc8, 0x7a, 0x6c, 0xcd, 0x35, 0x7b,
	0xd7, 0x29, 0xfa, 0x08, 0xbd, 0x3e, 0x4c, 0xe8, 0xe9, 0x7f, 0x74, 0x7d, 0xf8, 0x19, 0xdb, 0xc3,
	0x65, 0x03, 0x5c, 0xf6, 0x71, 0x50, 0x24, 0xcf, 0x5a, 0xf3, 0xfd, 0x9f, 0x39, 0x49, 0x47, 0x5b,
	0x78, 0x45, 0xc3, 0x43, 0x1e, 0xd1, 0x64, 0x31, 0x59, 0x4e, 0xd3, 0x17, 0x07, 0x57, 0x4d, 0xe4,
	0xc3, 0x36, 0x26, 0x9b, 0x6d, 0x4c, 0xfe, 0x6e, 0x63, 0x72, 0xbf, 0x8b, 0x83, 0xcd, 0x2e, 0x0e,
	0x7e, 0xed, 0xe2, 0xe0, 0xf3, 0x9d, 0x06, 0x5c, 0xd7, 0x19, 0x93, 0xd6, 0x70, 0xfd, 0x55, 0x39,
	0x53, 0x97, 0xb9, 0x16, 0x4e, 0x64, 0x82, 0x57, 0xca, 0x7b, 0x30, 0xe0, 0x11, 0xe4, 0x55, 0x23,
	0x0a, 0xc8, 0x05, 0x82, 0x2d, 0xf9, 0xf0, 0x2e, 0x60, 0x4b, 0x0f, 0xb9, 0x92, 0xa2, 0xff, 0x47,
	0xd9, 0x49, 0x17, 0xfe, 0xcd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xaf, 0x48, 0x60, 0x5e,
	0x02, 0x00, 0x00,
}

func (m *SignedPacketCommitmentsClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPacketCommitmentsClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPacketCommitmentsClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.PacketCommitmentsClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AttestatorId) > 0 {
		i -= len(m.AttestatorId)
		copy(dAtA[i:], m.AttestatorId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AttestatorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketCommitmentsClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketCommitmentsClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketCommitmentsClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketCommitments) > 0 {
		for iNdEx := len(m.PacketCommitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PacketCommitments[iNdEx])
			copy(dAtA[i:], m.PacketCommitments[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PacketCommitments[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedPacketCommitmentsClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestatorId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.PacketCommitmentsClaim.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PacketCommitmentsClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Height.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovTypes(uint64(l))
	if len(m.PacketCommitments) > 0 {
		for _, b := range m.PacketCommitments {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedPacketCommitmentsClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPacketCommitmentsClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPacketCommitmentsClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestatorId = append(m.AttestatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestatorId == nil {
				m.AttestatorId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCommitmentsClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketCommitmentsClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketCommitmentsClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketCommitmentsClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketCommitmentsClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCommitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketCommitments = append(m.PacketCommitments, make([]byte, postIndex-iNdEx))
			copy(m.PacketCommitments[len(m.PacketCommitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
