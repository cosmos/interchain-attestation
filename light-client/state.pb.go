// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pessimisticvalidation/lightclient/v1/state.proto

package lightclient

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClientState tracks the validation setup required for a light client
type ClientState struct {
	// chain_id is the chain-id of the chain this light client is tracking
	ChainId            string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	RequiredTokenPower cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=required_token_power,json=requiredTokenPower,proto3,customtype=cosmossdk.io/math.Int" json:"required_token_power"`
	// Block height when the client was frozen due to a misbehaviour
	FrozenHeight types.Height `protobuf:"bytes,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height"`
	// Latest height the client was updated to
	LatestHeight types.Height `protobuf:"bytes,4,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_748a9ab3d6040bfa, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

// ConsensusState tracks the state of the counterparty chain
type ConsensusState struct {
	// timestamp that corresponds to the block height in which the ConsensusState
	// was stored
	Timestamp time.Time `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// TODO: Look into how we can store the packet commitments in a more efficient
	// way (if we need to store for each height updated)
	// packet_commitments is the list of ibc packet commitments that exist on the
	// counterparty chain
	PacketCommitments [][]byte `protobuf:"bytes,2,rep,name=packet_commitments,json=packetCommitments,proto3" json:"packet_commitments,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_748a9ab3d6040bfa, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientState)(nil), "pessimisticvalidation.lightclient.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "pessimisticvalidation.lightclient.v1.ConsensusState")
}

func init() {
	proto.RegisterFile("pessimisticvalidation/lightclient/v1/state.proto", fileDescriptor_748a9ab3d6040bfa)
}

var fileDescriptor_748a9ab3d6040bfa = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0xba, 0x0a, 0x36, 0x6f, 0x20, 0x11, 0x0d, 0xa9, 0xeb, 0x21, 0xa9, 0x26, 0x0e, 0x95,
	0x50, 0x6d, 0x06, 0x37, 0xc4, 0x29, 0x15, 0x12, 0xbd, 0xa1, 0x30, 0x71, 0x40, 0x42, 0x91, 0xe3,
	0x78, 0x89, 0x69, 0x6c, 0x87, 0xf8, 0x4b, 0x91, 0x78, 0x02, 0xb8, 0xed, 0xce, 0x85, 0x87, 0xe0,
	0x21, 0x76, 0x9c, 0x38, 0x21, 0x0e, 0x03, 0xb5, 0x2f, 0x82, 0x1c, 0x37, 0xeb, 0x0e, 0x3b, 0x70,
	0xcb, 0xf7, 0xfd, 0xfe, 0xf8, 0x97, 0x9f, 0x8d, 0x9e, 0x54, 0xdc, 0x18, 0x21, 0x85, 0x01, 0xc1,
	0x96, 0xb4, 0x14, 0x19, 0x05, 0xa1, 0x15, 0x29, 0x45, 0x5e, 0x00, 0x2b, 0x05, 0x57, 0x40, 0x96,
	0x27, 0xc4, 0x00, 0x05, 0x8e, 0xab, 0x5a, 0x83, 0xf6, 0x1f, 0xdd, 0xaa, 0xc0, 0x37, 0x14, 0x78,
	0x79, 0x32, 0x3a, 0xcc, 0x75, 0xae, 0x5b, 0x01, 0xb1, 0x5f, 0x4e, 0x3b, 0x3a, 0x62, 0xda, 0x48,
	0x6d, 0x12, 0x07, 0xb8, 0x61, 0x03, 0x85, 0xb9, 0xd6, 0x79, 0xc9, 0x49, 0x3b, 0xa5, 0xcd, 0x19,
	0x01, 0x21, 0xb9, 0x01, 0x2a, 0xab, 0x8e, 0x20, 0x52, 0x46, 0x98, 0xae, 0x39, 0xd9, 0xe6, 0xda,
	0x9c, 0xd7, 0x12, 0x8e, 0xbf, 0xf5, 0xd1, 0xfe, 0xac, 0x5d, 0xbc, 0xb1, 0x71, 0xfd, 0x23, 0xb4,
	0xcb, 0x0a, 0x2a, 0x54, 0x22, 0xb2, 0xa1, 0x37, 0xf6, 0x26, 0x7b, 0xf1, 0xdd, 0x76, 0x9e, 0x67,
	0xfe, 0x7b, 0x74, 0x58, 0xf3, 0x8f, 0x8d, 0xa8, 0x79, 0x96, 0x80, 0x5e, 0x70, 0x95, 0x54, 0xfa,
	0x13, 0xaf, 0x87, 0x7d, 0x4b, 0x8b, 0x1e, 0x5f, 0x5c, 0x85, 0xbd, 0xdf, 0x57, 0xe1, 0x43, 0x17,
	0xd0, 0x64, 0x0b, 0x2c, 0x34, 0x91, 0x14, 0x0a, 0x3c, 0x57, 0xf0, 0xf3, 0xc7, 0x14, 0x6d, 0x92,
	0xcf, 0x15, 0xc4, 0x7e, 0x67, 0x74, 0x6a, 0x7d, 0x5e, 0x5b, 0x1b, 0xff, 0x25, 0xba, 0x77, 0x56,
	0xeb, 0xcf, 0x5c, 0x25, 0x05, 0xb7, 0xb5, 0x0c, 0x77, 0xc6, 0xde, 0x64, 0xff, 0xe9, 0x08, 0x8b,
	0x94, 0x61, 0xfb, 0x0b, 0xf8, 0xba, 0x28, 0xfc, 0xaa, 0x65, 0x44, 0x03, 0x7b, 0x66, 0x7c, 0xe0,
	0x64, 0x6e, 0x67, 0x6d, 0x4a, 0x0a, 0xdc, 0x40, 0x67, 0x33, 0xf8, 0x5f, 0x1b, 0x27, 0x73, 0xbb,
	0xe7, 0x83, 0x2f, 0xdf, 0xc3, 0xde, 0xf1, 0x57, 0x0f, 0xdd, 0x9f, 0x69, 0x65, 0xb8, 0x32, 0x8d,
	0x71, 0x05, 0x45, 0x68, 0xef, 0xba, 0xe4, 0xb6, 0x21, 0xeb, 0xed, 0xae, 0x01, 0x77, 0xd7, 0x80,
	0x4f, 0x3b, 0x46, 0xb4, 0x6b, 0xbd, 0xcf, 0xff, 0x84, 0x5e, 0xbc, 0x95, 0xf9, 0x53, 0xe4, 0x57,
	0x94, 0x2d, 0x38, 0x24, 0x4c, 0x4b, 0x29, 0x40, 0x72, 0x05, 0x66, 0xd8, 0x1f, 0xef, 0x4c, 0x0e,
	0xe2, 0x07, 0x0e, 0x99, 0x6d, 0x01, 0x97, 0x25, 0x7a, 0x7b, 0xb1, 0x0a, 0xbc, 0xcb, 0x55, 0xe0,
	0xfd, 0x5d, 0x05, 0xde, 0xf9, 0x3a, 0xe8, 0x5d, 0xae, 0x83, 0xde, 0xaf, 0x75, 0xd0, 0x7b, 0xf7,
	0x22, 0x17, 0x50, 0x34, 0x29, 0x66, 0x5a, 0x92, 0xfc, 0x03, 0xaf, 0x65, 0xa3, 0xb2, 0x9c, 0xd6,
	0x34, 0xa5, 0xe4, 0xc6, 0xb3, 0x9b, 0xde, 0xfe, 0x52, 0xd3, 0x3b, 0x6d, 0xea, 0x67, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x38, 0xca, 0xa3, 0xd5, 0x02, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.FrozenHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RequiredTokenPower.Size()
		i -= size
		if _, err := m.RequiredTokenPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintState(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketCommitments) > 0 {
		for iNdEx := len(m.PacketCommitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PacketCommitments[iNdEx])
			copy(dAtA[i:], m.PacketCommitments[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.PacketCommitments[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintState(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.RequiredTokenPower.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FrozenHeight.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LatestHeight.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovState(uint64(l))
	if len(m.PacketCommitments) > 0 {
		for _, b := range m.PacketCommitments {
			l = len(b)
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTokenPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredTokenPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FrozenHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCommitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketCommitments = append(m.PacketCommitments, make([]byte, postIndex-iNdEx))
			copy(m.PacketCommitments[len(m.PacketCommitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
