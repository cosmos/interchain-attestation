// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pessimisticvalidation/lightclient/v1/clientmsg.proto

package lightclient

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PessimisticClaims is the clientMsg that is sent to the light client to update
// the consensus state All the claims need to be for the same height and have
// the same packet_commitments
type PessimisticClaims struct {
	Claims []SignedPacketCommitmentsClaim `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims"`
}

func (m *PessimisticClaims) Reset()         { *m = PessimisticClaims{} }
func (m *PessimisticClaims) String() string { return proto.CompactTextString(m) }
func (*PessimisticClaims) ProtoMessage()    {}
func (*PessimisticClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4b3d4b72c7f07d, []int{0}
}
func (m *PessimisticClaims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PessimisticClaims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PessimisticClaims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PessimisticClaims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PessimisticClaims.Merge(m, src)
}
func (m *PessimisticClaims) XXX_Size() int {
	return m.Size()
}
func (m *PessimisticClaims) XXX_DiscardUnknown() {
	xxx_messageInfo_PessimisticClaims.DiscardUnknown(m)
}

var xxx_messageInfo_PessimisticClaims proto.InternalMessageInfo

func (m *PessimisticClaims) GetClaims() []SignedPacketCommitmentsClaim {
	if m != nil {
		return m.Claims
	}
	return nil
}

type SignedPacketCommitmentsClaim struct {
	AttestatorId           []byte                 `protobuf:"bytes,1,opt,name=attestator_id,json=attestatorId,proto3" json:"attestator_id,omitempty"`
	PacketCommitmentsClaim PacketCommitmentsClaim `protobuf:"bytes,2,opt,name=packet_commitments_claim,json=packetCommitmentsClaim,proto3" json:"packet_commitments_claim"`
	Signature              []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedPacketCommitmentsClaim) Reset()         { *m = SignedPacketCommitmentsClaim{} }
func (m *SignedPacketCommitmentsClaim) String() string { return proto.CompactTextString(m) }
func (*SignedPacketCommitmentsClaim) ProtoMessage()    {}
func (*SignedPacketCommitmentsClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4b3d4b72c7f07d, []int{1}
}
func (m *SignedPacketCommitmentsClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPacketCommitmentsClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPacketCommitmentsClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPacketCommitmentsClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPacketCommitmentsClaim.Merge(m, src)
}
func (m *SignedPacketCommitmentsClaim) XXX_Size() int {
	return m.Size()
}
func (m *SignedPacketCommitmentsClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPacketCommitmentsClaim.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPacketCommitmentsClaim proto.InternalMessageInfo

func (m *SignedPacketCommitmentsClaim) GetAttestatorId() []byte {
	if m != nil {
		return m.AttestatorId
	}
	return nil
}

func (m *SignedPacketCommitmentsClaim) GetPacketCommitmentsClaim() PacketCommitmentsClaim {
	if m != nil {
		return m.PacketCommitmentsClaim
	}
	return PacketCommitmentsClaim{}
}

func (m *SignedPacketCommitmentsClaim) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PacketCommitmentsClaim struct {
	Height            types.Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height"`
	Timestamp         time.Time    `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	PacketCommitments [][]byte     `protobuf:"bytes,3,rep,name=packet_commitments,json=packetCommitments,proto3" json:"packet_commitments,omitempty"`
}

func (m *PacketCommitmentsClaim) Reset()         { *m = PacketCommitmentsClaim{} }
func (m *PacketCommitmentsClaim) String() string { return proto.CompactTextString(m) }
func (*PacketCommitmentsClaim) ProtoMessage()    {}
func (*PacketCommitmentsClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad4b3d4b72c7f07d, []int{2}
}
func (m *PacketCommitmentsClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketCommitmentsClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketCommitmentsClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketCommitmentsClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketCommitmentsClaim.Merge(m, src)
}
func (m *PacketCommitmentsClaim) XXX_Size() int {
	return m.Size()
}
func (m *PacketCommitmentsClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketCommitmentsClaim.DiscardUnknown(m)
}

var xxx_messageInfo_PacketCommitmentsClaim proto.InternalMessageInfo

func (m *PacketCommitmentsClaim) GetHeight() types.Height {
	if m != nil {
		return m.Height
	}
	return types.Height{}
}

func (m *PacketCommitmentsClaim) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *PacketCommitmentsClaim) GetPacketCommitments() [][]byte {
	if m != nil {
		return m.PacketCommitments
	}
	return nil
}

func init() {
	proto.RegisterType((*PessimisticClaims)(nil), "pessimisticvalidation.lightclient.v1.PessimisticClaims")
	proto.RegisterType((*SignedPacketCommitmentsClaim)(nil), "pessimisticvalidation.lightclient.v1.SignedPacketCommitmentsClaim")
	proto.RegisterType((*PacketCommitmentsClaim)(nil), "pessimisticvalidation.lightclient.v1.PacketCommitmentsClaim")
}

func init() {
	proto.RegisterFile("pessimisticvalidation/lightclient/v1/clientmsg.proto", fileDescriptor_ad4b3d4b72c7f07d)
}

var fileDescriptor_ad4b3d4b72c7f07d = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x04, 0x45, 0xf4, 0x12, 0x86, 0x5a, 0xa8, 0xb2, 0xa2, 0xca, 0xb1, 0x02, 0x83,
	0x97, 0xde, 0xa9, 0x81, 0x81, 0xa1, 0x93, 0xbb, 0xc0, 0x56, 0x19, 0xc4, 0xc0, 0x12, 0xce, 0xe7,
	0xe3, 0xf2, 0xc0, 0xe7, 0xb3, 0x7c, 0xe7, 0x4c, 0x7c, 0x88, 0x7e, 0x29, 0xa4, 0x8e, 0x1d, 0x99,
	0x28, 0x4a, 0xbe, 0x08, 0xf2, 0xb9, 0xc6, 0x15, 0x4d, 0xab, 0x6c, 0xcf, 0xa7, 0xff, 0xff, 0xbd,
	0xdf, 0x7b, 0x7f, 0x19, 0xbf, 0x29, 0x85, 0x31, 0xa0, 0xc0, 0x58, 0xe0, 0x6b, 0x96, 0x43, 0xc6,
	0x2c, 0xe8, 0x82, 0xe6, 0x20, 0x57, 0x96, 0xe7, 0x20, 0x0a, 0x4b, 0xd7, 0xa7, 0xb4, 0xad, 0x94,
	0x91, 0xa4, 0xac, 0xb4, 0xd5, 0xde, 0xab, 0x9d, 0x2e, 0x72, 0xc7, 0x45, 0xd6, 0xa7, 0xd3, 0x17,
	0x52, 0x4b, 0xed, 0x0c, 0xb4, 0xa9, 0x5a, 0xef, 0x74, 0x06, 0x29, 0xa7, 0x5c, 0x57, 0x82, 0xfe,
	0xdf, 0xbf, 0x13, 0x48, 0xad, 0x65, 0x2e, 0xa8, 0xfb, 0x4a, 0xeb, 0xaf, 0xd4, 0x82, 0x12, 0xc6,
	0x32, 0x55, 0xb6, 0x82, 0x79, 0x8d, 0x0f, 0x2f, 0xfa, 0xf9, 0xe7, 0x39, 0x03, 0x65, 0xbc, 0x2f,
	0x78, 0xc4, 0x5d, 0xe5, 0xa3, 0x70, 0x18, 0x8d, 0x17, 0x31, 0xd9, 0x87, 0x91, 0x7c, 0x00, 0x59,
	0x88, 0xec, 0x82, 0xf1, 0xef, 0xc2, 0x9e, 0x6b, 0xa5, 0xc0, 0x2a, 0x51, 0x58, 0xe3, 0x9a, 0xc6,
	0x4f, 0xaf, 0x7e, 0xcf, 0x06, 0xc9, 0x6d, 0xdf, 0xf9, 0x0d, 0xc2, 0xc7, 0x8f, 0xc9, 0xbd, 0x97,
	0xf8, 0x39, 0xb3, 0xb6, 0x41, 0xb5, 0xba, 0x5a, 0x42, 0xe6, 0xa3, 0x10, 0x45, 0x93, 0x64, 0xd2,
	0x3f, 0xbe, 0xcf, 0xbc, 0x1f, 0xd8, 0x2f, 0x9d, 0x7d, 0xc9, 0x7b, 0xff, 0xd2, 0x8d, 0xf0, 0x9f,
	0x84, 0x28, 0x1a, 0x2f, 0xce, 0xf6, 0x23, 0x7f, 0x94, 0xf9, 0xa8, 0xdc, 0x8d, 0x78, 0x8c, 0x0f,
	0x0c, 0xc8, 0x82, 0xd9, 0xba, 0x12, 0xfe, 0xd0, 0xe1, 0xf5, 0x0f, 0xf3, 0x9f, 0x08, 0x1f, 0x3d,
	0xb0, 0xdb, 0x5b, 0x3c, 0x5a, 0x89, 0x06, 0xc0, 0x2d, 0x35, 0x5e, 0x4c, 0x09, 0xa4, 0x9c, 0x34,
	0x31, 0x92, 0x1e, 0xe9, 0x9d, 0x53, 0x74, 0x67, 0x6b, 0xf5, 0x5e, 0x8c, 0x0f, 0xfe, 0x05, 0x78,
	0xbb, 0xe1, 0x94, 0xb4, 0x11, 0x93, 0x2e, 0x62, 0xf2, 0xb1, 0x53, 0xc4, 0xcf, 0x1a, 0xf3, 0xe5,
	0xcd, 0x0c, 0x25, 0xbd, 0xcd, 0x3b, 0xc1, 0xde, 0xfd, 0xa3, 0xf9, 0xc3, 0x70, 0x18, 0x4d, 0x92,
	0xc3, 0x7b, 0xab, 0xc6, 0x9f, 0xae, 0x36, 0x01, 0xba, 0xde, 0x04, 0xe8, 0xcf, 0x26, 0x40, 0x97,
	0xdb, 0x60, 0x70, 0xbd, 0x0d, 0x06, 0xbf, 0xb6, 0xc1, 0xe0, 0xf3, 0x99, 0x04, 0xbb, 0xaa, 0x53,
	0xc2, 0xb5, 0xa2, 0xf2, 0x9b, 0xa8, 0x54, 0x5d, 0x64, 0x92, 0x55, 0x2c, 0x65, 0xf4, 0xce, 0xd1,
	0x4f, 0x76, 0xff, 0x09, 0xe9, 0xc8, 0xf1, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x11, 0xf9,
	0x98, 0x86, 0x35, 0x03, 0x00, 0x00,
}

func (m *PessimisticClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PessimisticClaims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PessimisticClaims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignedPacketCommitmentsClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPacketCommitmentsClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPacketCommitmentsClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintClientmsg(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.PacketCommitmentsClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClientmsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AttestatorId) > 0 {
		i -= len(m.AttestatorId)
		copy(dAtA[i:], m.AttestatorId)
		i = encodeVarintClientmsg(dAtA, i, uint64(len(m.AttestatorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketCommitmentsClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketCommitmentsClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketCommitmentsClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PacketCommitments) > 0 {
		for iNdEx := len(m.PacketCommitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PacketCommitments[iNdEx])
			copy(dAtA[i:], m.PacketCommitments[iNdEx])
			i = encodeVarintClientmsg(dAtA, i, uint64(len(m.PacketCommitments[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintClientmsg(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClientmsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClientmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PessimisticClaims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovClientmsg(uint64(l))
		}
	}
	return n
}

func (m *SignedPacketCommitmentsClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestatorId)
	if l > 0 {
		n += 1 + l + sovClientmsg(uint64(l))
	}
	l = m.PacketCommitmentsClaim.Size()
	n += 1 + l + sovClientmsg(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovClientmsg(uint64(l))
	}
	return n
}

func (m *PacketCommitmentsClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Height.Size()
	n += 1 + l + sovClientmsg(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovClientmsg(uint64(l))
	if len(m.PacketCommitments) > 0 {
		for _, b := range m.PacketCommitments {
			l = len(b)
			n += 1 + l + sovClientmsg(uint64(l))
		}
	}
	return n
}

func sovClientmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientmsg(x uint64) (n int) {
	return sovClientmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PessimisticClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PessimisticClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PessimisticClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, SignedPacketCommitmentsClaim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPacketCommitmentsClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPacketCommitmentsClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPacketCommitmentsClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestatorId = append(m.AttestatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestatorId == nil {
				m.AttestatorId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCommitmentsClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketCommitmentsClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketCommitmentsClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketCommitmentsClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketCommitmentsClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCommitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketCommitments = append(m.PacketCommitments, make([]byte, postIndex-iNdEx))
			copy(m.PacketCommitments[len(m.PacketCommitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientmsg = fmt.Errorf("proto: unexpected end of group")
)
